# If empty, use the chart name as common base name for any FROST-Server Kubernetes component
name:

frost:
  ######################################
  # FROST-Server general configuration #
  ######################################
  alwaysOrderbyId: true
  logSensitiveData: false
  queueLoggingInterval: 0

  #####################################
  # FROST-Server plugin configuration #
  #####################################
  plugins:
    providedPlugins:
    plugins:
    actuation:
      enable: false
      idType:
        actuator:
        task:
        taskingCapability:
    coreModel:
      enable: true
      editableDsProperties: false
      idType:
        default: LONG
        datastream:
        feature:
        historicalLocation:
        location:
        observedProperty:
        observation:
        sensor:
        thing:
    multiDatastream:
      enable: false
      idType:
        multiDatastream:
    modelLoader:
      enable: false
      modelPath:
      modelFiles:
      liquibasePath:
      liquibaseFiles:
      securityPath:
      securityFiles:
    dataArray:
      enable: true
    csv:
      enable: true
    geojson:
      enable: true
    batchProcessing:
      enable: true
    odata:
      enable: false
    openApi:
      enable: false

  ########################################
  # FROST-Server Extension configuration #
  ########################################
  extension:
    customLinks:
      enable:
      recurseDepth:
    filterDelete:
      enable:

  auth:
    provider:
    allowAnonymousRead: false
    role:
      read:
      create:
      update:
      delete:
      admin:
    realmName: FROST-Server
    plainTextPassword: true
    db:
      autoUpdate: "{{ .Values.frost.http.db.autoUpdate }}"
      maximumConnection: "{{ .Values.frost.http.db.maximumConnection }}"
      maximumIdleConnection: "{{ .Values.frost.http.db.maximumIdleConnection }}"
      minimumIdleConnection: "{{ .Values.frost.http.db.minimumIdleConnection }}"
    keycloakConfig:
    keycloakConfigFile:
    keycloakConfigUrl:
    keycloakConfigSecret:

  logging:
    default:
    parser:
    queries:
    requests:
    service:
    settings:
    moquette:
    liquibase:
    jooq:

  ##########################################
  # FROST-Server HTTP module configuration #
  ##########################################
  http:
    image:
      registry: docker.io
      repository: fraunhoferiosb/frost-server-http
      tag: 2.3.2
      pullPolicy: IfNotPresent
    # FROST-Server HTTP deployment settings
    replicas: 1
    ports:
      http:
        nodePort:
        servicePort: 80
    ingress:
      enabled: true
      rewriteAnnotation: nginx.ingress.kubernetes.io/rewrite-target
      rewriteTarget: /FROST-Server/$1
      path: /FROST-Server/(.*)
      annotations:
      tls:
        enabled: false
        secretName: []

    # FROST-Server HTTP deployment resource option. An empty resources field will default to the limits of the namespace.
    resources:
      # limits:
      #   cpu: 1000m
      #   memory: 1Gi
      requests:
        cpu: 500m
        memory: 1Gi


    # FROST-Server HTTP business settings
    serviceHost: frost-server
    serviceProtocol: http
    servicePort:
    urlSubPath:
    defaultCount: false
    defaultTop: 100
    maxTop: 1000
    maxDataSize: 25000000
    useAbsoluteNavigationLinks: true

    # FROST-Server Cross-Origin Resource Sharing settings to the FROST-Server HTTP
    cors:
      enable: false
      allowed:
        headers: Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers, Authorization
        methods: GET, HEAD, OPTIONS
        origins: '*'
      exposed:
        headers: Location
      preflight:
        maxage: 1800
      request:
        decorate: true
      support:
        credentials: false


    # FROST-Server Database related settings to the FROST-Server HTTP
    db:
      autoUpdate: true
      maximumConnection: 10
      maximumIdleConnection: 10
      minimumIdleConnection: 10

    # FROST-Server Messages Bus related settings to the FROST-Server HTTP
    bus:
      sendWorkerPoolSize: 10
      sendQueueSize: 2000
      recvWorkerPoolSize: 10
      recvQueueSize: 2000
      maxInFlight: 50

  ##########################################
  # FROST-Server MQTT module configuration #
  ##########################################
  mqtt:
    image:
      registry: docker.io
      repository: fraunhoferiosb/frost-server-mqtt
      tag: 2.3.2
      pullPolicy: IfNotPresent
    # FROST-Server MQTT deployment settings
    enabled: true
    annotations: {}
    serviceType: NodePort
    replicas: 1
    ports:
      mqtt:
        nodePort:
        servicePort: 1883
      websocket:
        nodePort:
        servicePort: 9876
    host: 0.0.0.0
    internalHost: localhost

    secureWebsocketPort:
    stickySessionTimeout: 10800
    exposedEndpoints:
    javaKeystorePath:
    keyManagerPassword:
    keyStorePassword:
    persistentStoreType: memory
    session_queue_size: 1024
    session_timeout_seconds: 3600
    sslPort:
    netty:
      mqtt:
        message_size: 8092

    # FROST-Server MQTT business settings
    serviceHost: "{{ .Values.frost.http.serviceHost }}"
    qos: 2
    subscribeMessageQueueSize: 100
    subscribeThreadPoolSize: 10
    createMessageQueueSize: 100
    createThreadPoolSize: 10
    maxInFlight: 50
    waitForEnter: false

    # FROST-Server Database related settings to the FROST-Server MQTT
    db:
      autoUpdate: false
      maximumConnection: 10
      maximumIdleConnection: 10
      minimumIdleConnection: 10

    # FROST-Server Messages Bus related settings to the FROST-Server MQTT
    bus:
      sendWorkerPoolSize: 10
      sendQueueSize: 2000
      recvWorkerPoolSize: 10
      recvQueueSize: 2000
      maxInFlight: 50

    ingress:
      enabled: false
      path: /mqtt
      annotations:
        kubernetes.io/ingress.class: nginx
        nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
        nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
      tls:
        enabled: false
        secretName:

  ##############################################
  # FROST-Server Database module configuration #
  ##############################################
  db:
    enableIntegratedDb: true
    dbExternalConnectionString: "jdbc:postgresql://externaldbhost:5432/sensorthings"
    image:
      registry: docker.io
      repository: postgis/postgis
      tag: 14-3.2-alpine
      pullPolicy: IfNotPresent
    # FROST-Server Database deployment settings
    ports:
      postgresql:
        servicePort: 5432
    persistence:
      enabled: false
      existingClaim:
      storageClassName:
      accessModes:
        - ReadWriteOnce
      capacity: 10Gi
      mountPath: /var/lib/postgresql/data
      hostPath:
    requiredHostname:

    # Common FROST-Server Database properties, shared by any other FROST-Server modules
    driver: "org.postgresql.Driver"
    implementationClass: "de.fraunhofer.iosb.ilt.frostserver.persistence.pgjooq.PostgresPersistenceManager"
    idGenerationMode: "ServerGeneratedOnly"
    transactionRole: false
    countMode: "FULL"
    database: sensorthings
    # Set this to your own created secret if needed
    existingSecret:
    secretUsernameKey: db.username
    secretPasswordKey: db.password
    username: c2Vuc29ydGhpbmdz
    password: bm93eW91Y2FuY2hhbmdlaXQ=
    securityContext:
      runAsUser:
      runAsGroup:
      fsGroup:

  ##############################################
  # FROST-Server Backup module configuration #
  ##############################################
  backup:
    enabled: false
    image:
      registry: docker.io
      repository: kartoza/pg-backup
      tag: 14-3.2
      pullPolicy: IfNotPresent

    removeBefore: 14

    persistence:
      existingClaim:
      storageClassName:
      accessModes:
        - ReadWriteOnce
      capacity: 10Gi
      mountPath: /backups

    securityContext:
      runAsUser:
      runAsGroup:
      fsGroup:

  ##################################################
  # FROST-Server Messages Bus module configuration #
  ##################################################
  bus:
    image:
        registry: docker.io
        repository: eclipse-mosquitto
        tag: 1.4.12
        pullPolicy: IfNotPresent
    # FROST-Server Messages Bus deployment settings
    ports:
      bus:
        servicePort: 1883

    # Common FROST-Server Messages Bus properties, shared by any other FROST-Server modules
    implementationClass: "de.fraunhofer.iosb.ilt.sta.messagebus.MqttMessageBus"
    topicName: "FROST-Bus"
    qos: 2
