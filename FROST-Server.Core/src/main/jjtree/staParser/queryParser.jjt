/*
 * Copyright (C) 2016 Fraunhofer Institut IOSB, Fraunhoferstr. 1, D 76131
 * Karlsruhe, Germany.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

options {
  MULTI = true;
  VISITOR = true;
  NODE_DEFAULT_VOID = true;
  STATIC = false;
  UNICODE_INPUT = true;
}

PARSER_BEGIN(Parser)

package de.fraunhofer.iosb.ilt.frostserver.parser.query;

/** A SensorThingsAPI query Grammar. */
public class Parser {

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN [IGNORE_CASE]:
{
  < PATH_SEPARATOR: "/" >
| < OPTIONS_SEPARATOR: "&" >
| < SUB_SEPARATOR: ";" >
| < VALUE_SEPARATOR: "," >
| < QUERY_START: "$" >
| < LB: "(" >
| < RB: ")" >
| < EQ: "=" >
| < EQ_DISTINCT: "=distinct:" >
| <LONG: ( <SIGN> )? (["0"-"9"] | ["1"-"9"](["0"-"9"])+) >
| <DOUBLE: ( <SIGN> )? (["0"-"9"] | ["1"-"9"](["0"-"9"])+) ("."(["0"-"9"])+)?(["E"]("-")?(["0"-"9"])+)? >

| <DATETIMEINTERVAL: (<DATETIME> | <DURATIONVALUE>) ["/"] (<DATETIME> | <DURATIONVALUE>) >
| <DATETIME: <DATE> "T" <TIME> <TIMEZONE> >
| <DATE: <LONG> "-" <MONTH> "-" <DAY> >
| <TIME:  <HOUR> ":" <ZERO_FIFTYNINE> ( ":" <ZERO_FIFTYNINE> ( "." (["0"-"9"])+ )? )? >
| <#TIMEZONE: ( "Z" | ["+", "-"] <HOUR> ":" <ZERO_FIFTYNINE> ) >
| <#MONTH: ("0" ["0"-"9"] | "1" ["0", "1", "2"]) >
| <#DAY: (["0", "1", "2"] ["0"-"9"] | "3" ["0", "1"]) >
| <#HOUR: ("0" ["0"-"9"] | "1" ["0"-"9"] | "2" ["0", "1", "2", "3"]) >
| <#ZERO_FIFTYNINE: (["0"-"5"] ["0"-"9"]) >

| <DURATION: "duration'" <DURATIONVALUE> "'" >
| <#DURATIONVALUE: ( <SIGN> )? "P" ( <LONG> "Y" )? ( <LONG> "M" )? ( <LONG> "W" )? ( <LONG> "D" )? ( "T" ( <LONG> "H" )? ( <LONG> "M" )? ( <LONG> ( "." <LONG> )? "S" )? )? >
| <#SIGN: ["+", "-"]>

| <O_EQ:       "eq" >
| <O_NE:       "ne" >
| <O_GT:       "gt" >
| <O_GE:       "ge" >
| <O_LT:       "lt" >
| <O_LE:       "le" >
| <O_AND:      "and" >
| <O_NOT:      "not" >
| <O_OR:       "or" >
| <O_ADD:      "add" >
| <O_SUB:      "sub" >
| <O_MUL:      "mul" >
| <O_DIV:      "div" >
| <O_MOD:      "mod" >
| <O_EXPAND:   "expand" >
| <O_ORDERBY:  "orderby" >
| <O_ASC:      "asc" >
| <O_DESC:     "desc" >
| <O_TOP:      "top" >
| <O_COUNT:    "count" >
| <O_SKIP:     "skip" >
| <O_SELECT:   "select" >
| <O_FILTER:   "filter" >
| <O_FORMAT:   "resultFormat" >
| <O_METADATA: "resultMetadata" >

| <QF_SUBSTRINGOF:        "substringof" <LB> >
| <QF_ENDSWITH:           "endswith" <LB> >
| <QF_STARTSWITH:         "startswith" <LB> >
| <QF_LENGTH:             "length" <LB> >
| <QF_INDEXOF:            "indexof" <LB> >
| <QF_SUBSTRING:          "substring" <LB> >
| <QF_TOLOWER:            "tolower" <LB> >
| <QF_TOUPPER:            "toupper" <LB> >
| <QF_TRIM:               "trim" <LB> >
| <QF_CONCAT:             "concat" <LB> >
| <QF_YEAR:               "year" <LB> >
| <QF_MONTH:              "month" <LB> >
| <QF_DAY:                "day" <LB> >
| <QF_HOUR:               "hour" <LB> >
| <QF_MINUTE:             "minute" <LB> >
| <QF_SECOND:             "second" <LB> >
| <QF_FRACTIONALSECONDS:  "fractionalseconds" <LB> >
| <QF_DATE:               "date" <LB> >
| <QF_TIME:               "time" <LB> >
| <QF_TOTALOFFSETMINUTES: "totaloffsetminutes" <LB> >
| <QF_NOW:                "now" <LB> >
| <QF_MINDATETIME:        "mindatetime" <LB> >
| <QF_MAXDATETIME:        "maxdatetime" <LB> >

| <QF_BEFORE:   "before" <LB> >
| <QF_AFTER:    "after" <LB> >
| <QF_MEETS:    "meets" <LB> >
| <QF_DURING:   "during" <LB> >
| <QF_OVERLAPS: "overlaps" <LB> >
| <QF_STARTS:   "starts" <LB> >
| <QF_FINISHES: "finishes" <LB> >

| <QF_ROUND:   "round" <LB> >
| <QF_FLOOR:   "floor" <LB> >
| <QF_CEILING: "ceiling" <LB> >

| <QF_GEO_DISTANCE:   "geo.distance" <LB> >
| <QF_GEO_LENGTH:     "geo.length" <LB> >
| <QF_GEO_INTERSECTS: "geo.intersects" <LB> >

| <QF_ST_EQUALS:     "st_equals" <LB> >
| <QF_ST_DISJOINT:   "st_disjoint" <LB> >
| <QF_ST_TOUCHES:    "st_touches" <LB> >
| <QF_ST_WITHIN:     "st_within" <LB> >
| <QF_ST_OVERLAPS:   "st_overlaps" <LB> >
| <QF_ST_CROSSES:    "st_crosses" <LB> >
| <QF_ST_INTERSECTS: "st_intersects" <LB> >
| <QF_ST_CONTAINS:   "st_contains" <LB> >
| <QF_ST_RELATE:     "st_relate" <LB> >

| <TRUE:    "true" >
| <FALSE:   "false" >
| <CHARSEQ: (["a"-"z","0"-"9",".","@","%",":","-","_"])+ >
| <GEO_STR_LIT: "geography'" (~["'"])* "'" >
| <PP_ARRAYINDEX: "[" <LONG> "]">
| <DOUBLESQUOTE: "''" >
| <STR_LIT: "'" (~["'"] | <DOUBLESQUOTE> )* "'" >
}

/** Main production. */
ASTStart Start() #Start : {}
{
  Options() <EOF>
  { return jjtThis; }
}



/** The query options */
void Options() #Options : {}
{
  (Option() ( <OPTIONS_SEPARATOR> Option() )*)
}
void InnerOptions() #Options : {}
{
  Option() ( <SUB_SEPARATOR> Option() )*
}
void Option() #Option : {}
{
  <QUERY_START> (
        ( <O_EXPAND>   <EQ> FilteredPaths() {jjtThis.setType("expand");} )
      | ( <O_ORDERBY>  <EQ> OrderBys() {jjtThis.setType("orderby");} )
      | ( <O_TOP>      <EQ> Long() {jjtThis.setType("top");} )
      | ( <O_COUNT>    <EQ> Boolean() {jjtThis.setType("count");} )
      | ( <O_SKIP>     <EQ> Long() {jjtThis.setType("skip");} )
      | ( <O_SELECT> (
                        ( <EQ_DISTINCT> PlainPaths() {jjtThis.setType("selectDistinct");} )
                      | ( <EQ> PlainPaths() {jjtThis.setType("select");} )
                      )
        )
      | ( <O_FILTER>   <EQ> Filter() {jjtThis.setType("filter");} )
      | ( <O_FORMAT>   <EQ> Format() {jjtThis.setType("resultFormat");} )
      | ( <O_METADATA> <EQ> Metadata() {jjtThis.setType("resultMetadata");} )
      )
}



void OrderBys() #OrderBys: {}
{
  OrderBy() ( <VALUE_SEPARATOR> OrderBy() )*
}
void OrderBy() #OrderBy: {}
{
  ( MixedExpression()
    (
      (
        (<O_ASC> {jjtThis.setAscending(true);} )
      | (<O_DESC> {jjtThis.setAscending(false);} )
      )
    )?
  )
}



/** A list of identifiers */
void Identifiers() #Identifiers: {}
{
  PlainPathElement() (<VALUE_SEPARATOR> PlainPathElement())*
}



/** Plain paths without any extras */
void PlainPaths() #PlainPaths: {}
{
  PlainPath() ( <VALUE_SEPARATOR> PlainPath() )*
}
void PlainPath() #PlainPath: {}
{
  PlainPathStartElement()
  ( ppArrayIndex() )*
  ( <PATH_SEPARATOR> PlainPathElement() (ppArrayIndex())* )*
}
void PlainPathStartElement() #PathElement: {String name;}
{
  name=PathStartIdentifier()
  {
    jjtThis.setName(name);
  }
}
void PlainPathElement() #PathElement: {String name;}
{
  name=Identifier()
  {
    jjtThis.setName(name);
  }
}
void ppArrayIndex() #PathElement: {Token t;}
{
  t=<PP_ARRAYINDEX> {jjtThis.setName(t.image.substring(1,t.image.length()-1));}
}


/** Filtered paths */
void FilteredPaths() #FilteredPaths: {}
{
  FilteredPath() ( <VALUE_SEPARATOR> FilteredPath() )*
}
void FilteredPath() #FilteredPath: {}
{
  FilteredPathElement() ( <PATH_SEPARATOR> FilteredPathElement() )*
}
void FilteredPathElement() #PathElement: {String name;}
{
  name=Identifier() ( <LB> InnerOptions() <RB> )?
  {
    jjtThis.setName(name);
  }
}



/** Paths with identifiers */
void IdentifiedPaths() #IdentifiedPaths: {}
{
  IdentifiedPath() ( <VALUE_SEPARATOR> IdentifiedPath() )*
}
void IdentifiedPath() #IdentifiedPath: {}
{
  IdentifiedPathElement() ( <PATH_SEPARATOR> IdentifiedPathElement() )*
}
void IdentifiedPathElement() #PathElement:
{
  String name;
  String id;
}
{
  name=Identifier()
  {
    jjtThis.setName(name);
  }
  (<LB> id=Identifier() <RB>
  {
    jjtThis.setIdentifier(id);
  })?
}



void Filter() #Filter:{}
{
  Expression()
}





/** An Expression. */
void Expression() : {}
{
  LogicalExpression()
}



void LogicalExpression() #LogicalOr(>1): {}
{
  ( LogicalAnd() (<O_OR> LogicalAnd() )*  )
}
void LogicalAnd() #LogicalAnd(>1): {}
{
  ( NegationExpression() (<O_AND> NegationExpression() )*  )
}



void NegationExpression() #Not(not) : {boolean not = false;}
{
  (
    (Not() {not=true;})? (BooleanFunction() | ComparativeExpression())
  )
}
void Not():{}
{
  (<O_NOT>)
}



/** Boolean functions all have 2 parameters */
void BooleanFunction() #BooleanFunction: {String name;}
{
  ( name=BoolFunctionName() UnaryExpression() <VALUE_SEPARATOR> UnaryExpression() <RB>
  | name=BoolFunctionNameThree() UnaryExpression() <VALUE_SEPARATOR> UnaryExpression() <VALUE_SEPARATOR> UnaryExpression() <RB>
  )
  {jjtThis.setName(name);}
}
String BoolFunctionName(): {Token t;}
{
  ( t=<QF_SUBSTRINGOF>
  | t=<QF_ENDSWITH>
  | t=<QF_STARTSWITH>
  | t=<QF_BEFORE>
  | t=<QF_AFTER>
  | t=<QF_MEETS>
  | t=<QF_DURING>
  | t=<QF_OVERLAPS>
  | t=<QF_STARTS>
  | t=<QF_FINISHES>
  | t=<QF_GEO_INTERSECTS>
  | t=<QF_ST_EQUALS>
  | t=<QF_ST_DISJOINT>
  | t=<QF_ST_TOUCHES>
  | t=<QF_ST_WITHIN>
  | t=<QF_ST_OVERLAPS>
  | t=<QF_ST_CROSSES>
  | t=<QF_ST_INTERSECTS>
  | t=<QF_ST_CONTAINS>)
  { return t.image; }
}
String BoolFunctionNameThree(): {Token t;}
{
  ( t=<QF_ST_RELATE>)
  { return t.image; }
}



void ComparativeExpression() #Comparison(>1): {String s;}
{
  (
    MixedExpression() (s=Compare() {jjtThis.setName(s);} MixedExpression() )?
  )
}
String Compare() : {String s;}
{
    (
      (<O_EQ> {s="EQ";} )
    | (<O_NE> {s="NE";} )
    | (<O_GT> {s="GT";} )
    | (<O_GE> {s="GE";} )
    | (<O_LT> {s="LT";} )
    | (<O_LE> {s="LE";} )
    )
  {return s;}
}

void MixedExpression(): {}
{
  (
    LOOKAHEAD(AdditiveExpression()) AdditiveExpression()
  | ( <LB> LogicalExpression() <RB> )
  )
}

void AdditiveExpression() #PlusMin(>1): {}
{
  (
    MultiplicativeExpression() (PlusMin() MultiplicativeExpression() )*
  )
}
void PlusMin() #Operator:{}
{
    (
      (<O_ADD> {jjtThis.setName("+");} )
    | (<O_SUB> {jjtThis.setName("-");} )
    )
}



void MultiplicativeExpression() #MulDiv(>1): {}
{
  (
    UnaryExpression() (MulDiv() UnaryExpression() )*
  )
}
void MulDiv() #Operator:{}
{
    (
      (<O_DIV> {jjtThis.setName("DIV");} )
    | (<O_MUL> {jjtThis.setName("MUL");} )
    | (<O_MOD> {jjtThis.setName("MOD");} )
    )
}


void UnaryExpression() : {}
{
    MathFunction()
  | (<LB> AdditiveExpression() <RB>)
  | StringLit()
  | GeoStringLit()
  | Boolean()
  | Number()
  | Duration()
  | DateOrTime()
  | PlainPath()
}



void MathFunction(): {}
{
  FunctionNone()|FunctionSingle()|FunctionDouble()|FunctionDoubleTripple()
}



/** Math Functions with 0 parameters */
void FunctionNone() #Function: {String name;}
{
  name=FunctionNameNone()  <RB>
  {jjtThis.setName(name);}
}

/** Math Functions with 1 parameter */
void FunctionSingle() #Function: {String name;}
{
  name=FunctionNameSingle()  AdditiveExpression() <RB>
  {jjtThis.setName(name);}
}

/** Math Functions with 2 parameters */
void FunctionDouble() #Function: {String name;}
{
  name=FunctionNameDouble()  AdditiveExpression() <VALUE_SEPARATOR> AdditiveExpression() <RB>
  {jjtThis.setName(name);}
}
/** Math Functions with 2 or 3 parameters */
void FunctionDoubleTripple() #Function: {String name;}
{
  name=FunctionNameDoubleTripple()  AdditiveExpression() <VALUE_SEPARATOR> AdditiveExpression() (<VALUE_SEPARATOR> AdditiveExpression())? <RB>
  {jjtThis.setName(name);}
}

String FunctionNameNone(): {Token t;}
{
  ( t=<QF_NOW>
  | t=<QF_MINDATETIME>
  | t=<QF_MAXDATETIME>
  )
  { return t.image; }
}
String FunctionNameSingle(): {Token t;}
{
  ( t=<QF_ROUND>
  | t=<QF_FLOOR>
  | t=<QF_CEILING>
  | t=<QF_LENGTH>
  | t=<QF_YEAR>
  | t=<QF_MONTH>
  | t=<QF_DAY>
  | t=<QF_HOUR>
  | t=<QF_MINUTE>
  | t=<QF_SECOND>
  | t=<QF_FRACTIONALSECONDS>
  | t=<QF_DATE>
  | t=<QF_TIME>
  | t=<QF_TOTALOFFSETMINUTES>
  | t=<QF_TOLOWER>
  | t=<QF_TOUPPER>
  | t=<QF_TRIM>
  | t=<QF_GEO_LENGTH>
  )
  { return t.image; }
}
String FunctionNameDouble(): {Token t;}
{
  ( t=<QF_INDEXOF>
  | t=<QF_CONCAT>
  | t=<QF_GEO_DISTANCE>
  )
  { return t.image; }
}
String FunctionNameDoubleTripple(): {Token t;}
{
  ( t=<QF_SUBSTRING>
  )
  { return t.image; }
}


/** An identifier */
String Identifier():
{
  Token t;
}
{
  (t=<LONG> | t=<CHARSEQ> | t=Keyword())
  { return t.image; }
}

/** An identifier that can be the first element in a path */
String PathStartIdentifier():
{
  Token t;
}
{
  (t=<CHARSEQ> | t=Keyword())
  { return t.image; }
}



/** O_NOT, TRUE and FALSE can not be in this list.. */
Token Keyword():
{
  Token t;
}
{
  ( t=<O_EQ>
  | t=<O_NE>
  | t=<O_GT>
  | t=<O_GE>
  | t=<O_LT>
  | t=<O_LE>
  | t=<O_AND>
  | t=<O_OR>
  | t=<O_ADD>
  | t=<O_SUB>
  | t=<O_MUL>
  | t=<O_DIV>
  | t=<O_MOD>
  | t=<O_EXPAND>
  | t=<O_ORDERBY>
  | t=<O_ASC>
  | t=<O_DESC>
  | t=<O_TOP>
  | t=<O_COUNT>
  | t=<O_SKIP>
  | t=<O_SELECT>
  | t=<O_FILTER>
  )
  { return t; }
}



Token StringLit() #ValueNode : {Token t;}
{
  t=<STR_LIT>
  {
    jjtThis.jjtSetValue(t.image.substring(1,t.image.length()-1));
    return t;
  }
}



Token GeoStringLit() #GeoStringLit : {Token t;}
{
  t=<GEO_STR_LIT>
  {
    jjtThis.jjtSetValue(t.image);
    return t;
  }
}


void Duration() #ValueNode : {Token t;}
{
  t=<DURATION>
  {
    jjtThis.jjtSetValue(new org.joda.time.Period(t.image.substring(9,t.image.length()-1)));
  }
}


void DateOrTime(): {}
{
  DateTimeInterval() | DateTime() | Date() | Time()
}
void DateTimeInterval() #ValueNode : {Token t;}
{
  t=<DATETIMEINTERVAL>
  {
    jjtThis.jjtSetValue(org.joda.time.Interval.parse(t.image));
  }
}
void DateTime() #ValueNode : {Token t;}
{
  t=<DATETIME>
  {
    jjtThis.jjtSetValue(org.joda.time.DateTime.parse(t.image));
  }
}
void Date() #ValueNode : {Token t;}
{
  t=<DATE>
  {
    jjtThis.jjtSetValue(org.joda.time.LocalDate.parse(t.image));
  }
}
void Time() #ValueNode : {Token t;}
{
  t=<TIME>
  {
    jjtThis.jjtSetValue(org.joda.time.LocalTime.parse(t.image));
  }
}


void Number(): {}
{
  (Long() | Double())
}



Token Long() #ValueNode : {Token t;}
{
  t=<LONG>
  {
    jjtThis.jjtSetValue(Long.valueOf(t.image));
    return t;
  }
}



Token Double() #ValueNode : {Token t;}
{
  t=<DOUBLE>
  {
    jjtThis.jjtSetValue(Double.valueOf(t.image));
    return t;
  }
}



void Boolean() #Bool : {}
{
    (<TRUE> {jjtThis.setValue(true);})
  | (<FALSE> {jjtThis.setValue(false);})
}



void Format() #Format : {Token t;}
{
    (t=<CHARSEQ> {jjtThis.setValue(t.image);})
}

void Metadata() #Metadata : {Token t;}
{
    (t=<CHARSEQ> {jjtThis.setValue(t.image);})
}
